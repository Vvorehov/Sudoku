var I=Object.defineProperty;var E=(i,t,e)=>t in i?I(i,t,{enumerable:!0,configurable:!0,writable:!0,value:e}):i[t]=e;var f=(i,t,e)=>E(i,typeof t!="symbol"?t+"":t,e);import{E as m}from"./vendor-DmRBNYNi.js";var h=(i=>(i.BEGINNER="beginner",i.INTERMEDIATE="intermediate",i.HARD="hard",i.EXPERT="expert",i.ADVANCED="advanced",i))(h||{});class u{static generatePuzzle(t){const e=this.generateSolution();return this.createPuzzle(e,t)}static generateSolution(){const t=Array(this.GRID_SIZE).fill(null).map(()=>Array(this.GRID_SIZE).fill(0));return this.fillGrid(t),t}static fillGrid(t){const e=this.findEmptyCell(t);if(!e)return!0;const[s,l]=e,a=this.shuffleArray([1,2,3,4,5,6,7,8,9]);for(const o of a)if(this.isValid(t,s,l,o)){if(t[s][l]=o,this.fillGrid(t))return!0;t[s][l]=0}return!1}static findEmptyCell(t){for(let e=0;e<this.GRID_SIZE;e++)for(let s=0;s<this.GRID_SIZE;s++)if(t[e][s]===0)return[e,s];return null}static isValid(t,e,s,l){for(let r=0;r<this.GRID_SIZE;r++)if(t[e][r]===l)return!1;for(let r=0;r<this.GRID_SIZE;r++)if(t[r][s]===l)return!1;const a=Math.floor(e/this.BOX_SIZE)*this.BOX_SIZE,o=Math.floor(s/this.BOX_SIZE)*this.BOX_SIZE;for(let r=0;r<this.BOX_SIZE;r++)for(let n=0;n<this.BOX_SIZE;n++)if(t[a+r][o+n]===l)return!1;return!0}static createPuzzle(t,e){const s=t.map(o=>o.map(r=>({value:r||null,isEditable:!0,isError:!1,isHint:!1,draftValues:[]}))),l=this.getCellsToRemove(e),a=this.shuffleArray(Array.from({length:this.GRID_SIZE*this.GRID_SIZE},(o,r)=>[Math.floor(r/this.GRID_SIZE),r%this.GRID_SIZE]));for(let o=0;o<l;o++){const[r,n]=a[o];s[r][n].value=null,s[r][n].isEditable=!0}return s}static getCellsToRemove(t){switch(t){case h.BEGINNER:return 41+Math.floor(Math.random()*5);case h.INTERMEDIATE:return 45+Math.floor(Math.random()*4);case h.HARD:return 49+Math.floor(Math.random()*4);case h.EXPERT:return 53+Math.floor(Math.random()*4);case h.ADVANCED:return 57+Math.floor(Math.random()*4);default:return 41+Math.floor(Math.random()*5)}}static shuffleArray(t){const e=[...t];for(let s=e.length-1;s>0;s--){const l=Math.floor(Math.random()*(s+1));[e[s],e[l]]=[e[l],e[s]]}return e}static validateCell(t,e,s,l){if(l===null)return!0;for(let r=0;r<this.GRID_SIZE;r++)if(r!==s&&t[e][r].value===l)return!1;for(let r=0;r<this.GRID_SIZE;r++)if(r!==e&&t[r][s].value===l)return!1;const a=Math.floor(e/this.BOX_SIZE)*this.BOX_SIZE,o=Math.floor(s/this.BOX_SIZE)*this.BOX_SIZE;for(let r=0;r<this.BOX_SIZE;r++)for(let n=0;n<this.BOX_SIZE;n++){const c=a+r,d=o+n;if(c!==e&&d!==s&&t[c][d].value===l)return!1}return!0}static isGridComplete(t){for(let e=0;e<this.GRID_SIZE;e++)for(let s=0;s<this.GRID_SIZE;s++)if(t[e][s].value===null||t[e][s].isError)return!1;return!0}static getAvailableNumbers(t){const e={};for(let s=1;s<=9;s++)e[s]=!0;for(let s=0;s<this.GRID_SIZE;s++)for(let l=0;l<this.GRID_SIZE;l++)t[s][l].value!==null&&(e[t[s][l].value]=!1);return e}}f(u,"GRID_SIZE",9),f(u,"BOX_SIZE",3);const g=m("game",{state:()=>({grid:[],solution:[],initialGrid:[],difficulty:h.BEGINNER,score:0,hintsRemaining:3,startTime:0,endTime:null,isComplete:!1,isPaused:!1,availableNumbers:{},history:[],historyIndex:-1,records:[],selectedCell:null}),actions:{generatePuzzle(i){const t=u.generatePuzzle(i);return this.grid=t,this.initialGrid=JSON.parse(JSON.stringify(t)),this.difficulty=i,this.score=1e3,this.hintsRemaining=3,this.startTime=Date.now(),this.endTime=null,this.isComplete=!1,this.isPaused=!1,this.availableNumbers=u.getAvailableNumbers(this.grid),this.history=[JSON.parse(JSON.stringify(this.grid))],this.historyIndex=0,this.selectedCell=null,t},updateCell(i,t,e){this.initialGrid[i][t].isEditable&&(this.grid[i][t].value=e,this.availableNumbers=u.getAvailableNumbers(this.grid),this.isComplete=u.isGridComplete(this.grid),this.isComplete&&(this.endTime=Date.now(),this.saveScore()),this.saveToHistory())},getHint(){if(this.hintsRemaining<=0)return null;const i=this.grid.flatMap((e,s)=>e.map((l,a)=>({row:s,col:a,cell:l}))).filter(({cell:e})=>e.value===null);if(i.length===0)return null;const t=i[Math.floor(Math.random()*i.length)];return this.hintsRemaining--,this.score-=50,{row:t.row,col:t.col,value:this.solution[t.row][t.col]}},checkSolution(){return u.isGridComplete(this.grid)},saveToHistory(){this.history=this.history.slice(0,this.historyIndex+1),this.history.push(JSON.parse(JSON.stringify(this.grid))),this.historyIndex++},saveScore(){const i=Math.floor((this.endTime-this.startTime)/1e3),t=this.score-i,e={difficulty:this.difficulty,score:t,date:new Date().toISOString(),timeSpent:i},s=this.getScores(this.difficulty);s.push(e),s.sort((l,a)=>a.score-l.score),s.splice(10),localStorage.setItem(`sudokuRecords_${this.difficulty}`,JSON.stringify(s))},getScores(i){const t=localStorage.getItem(`sudokuRecords_${i}`);return t?JSON.parse(t):[]},loadRecords(){this.records=Object.values(h).flatMap(i=>this.getScores(i))},startNewGame(i){this.generatePuzzle(i)},setSelectedCell(i,t){this.grid[i][t].isEditable&&(this.selectedCell=[i,t])},clearSelectedCell(){if(this.selectedCell){const[i,t]=this.selectedCell;this.updateCell(i,t,0)}}}});export{h as D,g as u};
//# sourceMappingURL=game-CEA1XnS2.js.map
