{"version":3,"file":"game-CEA1XnS2.js","sources":["../../src/types/sudoku.ts","../../src/services/sudokuService.ts","../../src/stores/game.ts"],"sourcesContent":["export type CellValue = number | null\nexport type Grid = CellValue[][]\nexport type Position = [number, number]\n\nexport enum Difficulty {\n  BEGINNER = 'beginner',\n  INTERMEDIATE = 'intermediate',\n  HARD = 'hard',\n  EXPERT = 'expert',\n  ADVANCED = 'advanced',\n}\n\nexport interface Cell {\n  value: CellValue\n  isEditable: boolean\n  isError: boolean\n  isHint: boolean\n  draftValues: number[]\n}\n\nexport interface GameState {\n  grid: Cell[][]\n  difficulty: Difficulty\n  score: number\n  hintsUsed: number\n  startTime: number\n  endTime: number | null\n  isComplete: boolean\n  isPaused: boolean\n  availableNumbers: Record<number, boolean>\n}\n\nexport interface GameRecord {\n  difficulty: Difficulty\n  score: number\n  date: string\n  timeSpent: number\n  name?: string\n  isCurrentUser?: boolean\n}\n\nexport interface GameSettings {\n  difficulty: Difficulty\n  maxHints: number\n  baseScore: number\n  timeBonus: number\n  correctCellPoints: number\n  hintPenalty: number\n  errorPenalty: number\n}\n","import type { Cell, CellValue, Position } from '@/types/sudoku'\nimport { Difficulty } from '@/types/sudoku'\n\nexport class SudokuService {\n  private static readonly GRID_SIZE = 9\n  private static readonly BOX_SIZE = 3\n\n  public static generatePuzzle(difficulty: Difficulty): Cell[][] {\n    const solution = this.generateSolution()\n    const puzzle = this.createPuzzle(solution, difficulty)\n    return puzzle\n  }\n\n  private static generateSolution(): number[][] {\n    const grid: number[][] = Array(this.GRID_SIZE)\n      .fill(null)\n      .map(() => Array(this.GRID_SIZE).fill(0))\n    this.fillGrid(grid)\n    return grid\n  }\n\n  private static fillGrid(grid: number[][]): boolean {\n    const empty = this.findEmptyCell(grid)\n    if (!empty) return true\n\n    const [row, col] = empty\n    const numbers = this.shuffleArray([1, 2, 3, 4, 5, 6, 7, 8, 9])\n\n    for (const num of numbers) {\n      if (this.isValid(grid, row, col, num)) {\n        grid[row][col] = num\n        if (this.fillGrid(grid)) return true\n        grid[row][col] = 0\n      }\n    }\n    return false\n  }\n\n  private static findEmptyCell(grid: number[][]): Position | null {\n    for (let i = 0; i < this.GRID_SIZE; i++) {\n      for (let j = 0; j < this.GRID_SIZE; j++) {\n        if (grid[i][j] === 0) return [i, j]\n      }\n    }\n    return null\n  }\n\n  private static isValid(grid: number[][], row: number, col: number, num: number): boolean {\n    // Check row\n    for (let x = 0; x < this.GRID_SIZE; x++) {\n      if (grid[row][x] === num) return false\n    }\n\n    // Check column\n    for (let x = 0; x < this.GRID_SIZE; x++) {\n      if (grid[x][col] === num) return false\n    }\n\n    // Check box\n    const boxRow = Math.floor(row / this.BOX_SIZE) * this.BOX_SIZE\n    const boxCol = Math.floor(col / this.BOX_SIZE) * this.BOX_SIZE\n    for (let i = 0; i < this.BOX_SIZE; i++) {\n      for (let j = 0; j < this.BOX_SIZE; j++) {\n        if (grid[boxRow + i][boxCol + j] === num) return false\n      }\n    }\n\n    return true\n  }\n\n  private static createPuzzle(solution: number[][], difficulty: Difficulty): Cell[][] {\n    const puzzle = solution.map((row) =>\n      row.map((value) => ({\n        value: value || null,\n        isEditable: true,\n        isError: false,\n        isHint: false,\n        draftValues: [],\n      })),\n    )\n\n    const cellsToRemove = this.getCellsToRemove(difficulty)\n    const positions = this.shuffleArray(\n      Array.from({ length: this.GRID_SIZE * this.GRID_SIZE }, (_, i) => [\n        Math.floor(i / this.GRID_SIZE),\n        i % this.GRID_SIZE,\n      ]),\n    )\n\n    for (let i = 0; i < cellsToRemove; i++) {\n      const [row, col] = positions[i]\n      puzzle[row][col].value = null\n      puzzle[row][col].isEditable = true\n    }\n\n    return puzzle\n  }\n\n  private static getCellsToRemove(difficulty: Difficulty): number {\n    switch (difficulty) {\n      case Difficulty.BEGINNER:\n        return 41 + Math.floor(Math.random() * 5) // 36-40 cells visible\n      case Difficulty.INTERMEDIATE:\n        return 45 + Math.floor(Math.random() * 4) // 32-36 cells visible\n      case Difficulty.HARD:\n        return 49 + Math.floor(Math.random() * 4) // 28-32 cells visible\n      case Difficulty.EXPERT:\n        return 53 + Math.floor(Math.random() * 4) // 24-28 cells visible\n      case Difficulty.ADVANCED:\n        return 57 + Math.floor(Math.random() * 4) // 20-24 cells visible\n      default:\n        return 41 + Math.floor(Math.random() * 5) // Default to beginner\n    }\n  }\n\n  private static shuffleArray<T>(array: T[]): T[] {\n    const newArray = [...array]\n    for (let i = newArray.length - 1; i > 0; i--) {\n      const j = Math.floor(Math.random() * (i + 1))\n      ;[newArray[i], newArray[j]] = [newArray[j], newArray[i]]\n    }\n    return newArray\n  }\n\n  public static validateCell(grid: Cell[][], row: number, col: number, value: CellValue): boolean {\n    if (value === null) return true\n\n    // Check row\n    for (let x = 0; x < this.GRID_SIZE; x++) {\n      if (x !== col && grid[row][x].value === value) return false\n    }\n\n    // Check column\n    for (let x = 0; x < this.GRID_SIZE; x++) {\n      if (x !== row && grid[x][col].value === value) return false\n    }\n\n    // Check box\n    const boxRow = Math.floor(row / this.BOX_SIZE) * this.BOX_SIZE\n    const boxCol = Math.floor(col / this.BOX_SIZE) * this.BOX_SIZE\n    for (let i = 0; i < this.BOX_SIZE; i++) {\n      for (let j = 0; j < this.BOX_SIZE; j++) {\n        const currentRow = boxRow + i\n        const currentCol = boxCol + j\n        if (\n          currentRow !== row &&\n          currentCol !== col &&\n          grid[currentRow][currentCol].value === value\n        ) {\n          return false\n        }\n      }\n    }\n\n    return true\n  }\n\n  public static isGridComplete(grid: Cell[][]): boolean {\n    for (let i = 0; i < this.GRID_SIZE; i++) {\n      for (let j = 0; j < this.GRID_SIZE; j++) {\n        if (grid[i][j].value === null || grid[i][j].isError) return false\n      }\n    }\n    return true\n  }\n\n  public static getAvailableNumbers(grid: Cell[][]): Record<number, boolean> {\n    const available: Record<number, boolean> = {}\n    for (let i = 1; i <= 9; i++) {\n      available[i] = true\n    }\n\n    for (let i = 0; i < this.GRID_SIZE; i++) {\n      for (let j = 0; j < this.GRID_SIZE; j++) {\n        if (grid[i][j].value !== null) {\n          available[grid[i][j].value as number] = false\n        }\n      }\n    }\n\n    return available\n  }\n}\n","import { defineStore } from 'pinia'\nimport type { Cell, GameRecord, Position } from '@/types/sudoku'\nimport { Difficulty } from '@/types/sudoku'\nimport { SudokuService } from '@/services/sudokuService'\n\ninterface GameState {\n  grid: Cell[][]\n  solution: number[][]\n  initialGrid: Cell[][]\n  difficulty: Difficulty\n  score: number\n  hintsRemaining: number\n  startTime: number\n  endTime: number | null\n  isComplete: boolean\n  isPaused: boolean\n  availableNumbers: Record<number, boolean>\n  history: Cell[][][]\n  historyIndex: number\n  records: GameRecord[]\n  selectedCell: Position | null\n}\n\nexport const useGameStore = defineStore('game', {\n  state: (): GameState => ({\n    grid: [],\n    solution: [],\n    initialGrid: [],\n    difficulty: Difficulty.BEGINNER,\n    score: 0,\n    hintsRemaining: 3,\n    startTime: 0,\n    endTime: null,\n    isComplete: false,\n    isPaused: false,\n    availableNumbers: {},\n    history: [],\n    historyIndex: -1,\n    records: [],\n    selectedCell: null,\n  }),\n\n  actions: {\n    generatePuzzle(difficulty: Difficulty) {\n      const puzzle = SudokuService.generatePuzzle(difficulty)\n      this.grid = puzzle\n      this.initialGrid = JSON.parse(JSON.stringify(puzzle))\n      this.difficulty = difficulty\n      this.score = 1000\n      this.hintsRemaining = 3\n      this.startTime = Date.now()\n      this.endTime = null\n      this.isComplete = false\n      this.isPaused = false\n      this.availableNumbers = SudokuService.getAvailableNumbers(this.grid)\n      this.history = [JSON.parse(JSON.stringify(this.grid))]\n      this.historyIndex = 0\n      this.selectedCell = null\n      return puzzle\n    },\n\n    updateCell(row: number, col: number, value: number) {\n      if (!this.initialGrid[row][col].isEditable) return\n\n      this.grid[row][col].value = value\n      this.availableNumbers = SudokuService.getAvailableNumbers(this.grid)\n      this.isComplete = SudokuService.isGridComplete(this.grid)\n\n      if (this.isComplete) {\n        this.endTime = Date.now()\n        this.saveScore()\n      }\n\n      this.saveToHistory()\n    },\n\n    getHint() {\n      if (this.hintsRemaining <= 0) return null\n\n      const emptyCells = this.grid\n        .flatMap((row, i) => row.map((cell, j) => ({ row: i, col: j, cell })))\n        .filter(({ cell }) => cell.value === null)\n\n      if (emptyCells.length === 0) return null\n\n      const randomCell = emptyCells[Math.floor(Math.random() * emptyCells.length)]\n      this.hintsRemaining--\n      this.score -= 50\n\n      return {\n        row: randomCell.row,\n        col: randomCell.col,\n        value: this.solution[randomCell.row][randomCell.col],\n      }\n    },\n\n    checkSolution() {\n      return SudokuService.isGridComplete(this.grid)\n    },\n\n    saveToHistory() {\n      this.history = this.history.slice(0, this.historyIndex + 1)\n      this.history.push(JSON.parse(JSON.stringify(this.grid)))\n      this.historyIndex++\n    },\n\n    saveScore() {\n      const timeSpent = Math.floor((this.endTime! - this.startTime) / 1000)\n      const finalScore = this.score - timeSpent\n      const newRecord: GameRecord = {\n        difficulty: this.difficulty,\n        score: finalScore,\n        date: new Date().toISOString(),\n        timeSpent,\n      }\n\n      const records = this.getScores(this.difficulty)\n      records.push(newRecord)\n      records.sort((a, b) => b.score - a.score)\n      records.splice(10) // Keep only top 10 scores\n\n      localStorage.setItem(`sudokuRecords_${this.difficulty}`, JSON.stringify(records))\n    },\n\n    getScores(difficulty: Difficulty): GameRecord[] {\n      const savedRecords = localStorage.getItem(`sudokuRecords_${difficulty}`)\n      return savedRecords ? JSON.parse(savedRecords) : []\n    },\n\n    loadRecords() {\n      this.records = Object.values(Difficulty).flatMap((difficulty) => this.getScores(difficulty))\n    },\n\n    startNewGame(difficulty: Difficulty) {\n      this.generatePuzzle(difficulty)\n    },\n\n    setSelectedCell(row: number, col: number) {\n      if (this.grid[row][col].isEditable) {\n        this.selectedCell = [row, col]\n      }\n    },\n\n    clearSelectedCell() {\n      if (this.selectedCell) {\n        const [row, col] = this.selectedCell\n        this.updateCell(row, col, 0)\n      }\n    },\n  },\n})\n"],"names":["Difficulty","SudokuService","difficulty","solution","grid","empty","row","col","numbers","num","i","j","x","boxRow","boxCol","puzzle","value","cellsToRemove","positions","_","array","newArray","currentRow","currentCol","available","__publicField","useGameStore","defineStore","emptyCells","cell","randomCell","timeSpent","finalScore","newRecord","records","a","b","savedRecords"],"mappings":"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"}